处理文本的工具：
	grep		过滤文本内容
	sed			编辑文本内容
	awk			生成报表工具 
	
正则表达式：

匹配单个字符

	.任意单个字符
	[akt]多个字符a或k或t
	[a-z]	[A-Z]	[0-9]	[a-zA-Z]	[a-zA-Z0-9]	
	[^a-z]取反

	特殊集：
		[[:alnum:]]任意单个字符或数字
		[[:alpha:]]	[[:digit:]]	[[:upper:]]	[[:lower:]]	[[:space:]]

匹配字符出现的位置

	^string以...开头
	string$以...结尾
	^$	空行

匹配前一个字符出现的次数

	*  0次或者多次
	\? 0次或者1次
	\+ 至少一次
	{2} 精确匹配2次
	{2,5} 最少2次，最多5次
	{2,}  最少2次，最多无限制

分组 	（abc）  



sed: Stream Editor 流编辑器 
	行编辑器 逐行编辑
	
将每行内容读入到内存中，在内存中进行处理，将结果返回给屏幕 ，此段内存空间称为模式空间
默认不编辑原文件，仅对模式空间的数据进行处理，处理结束后，将模式空间的内容显示到屏幕 

sed命令的使用格式

# sed [option] scritps file1 file2 ...
# sed 选项  脚本  文件1 文件2 ...

# sed [options] 'AddressCommand' file ...

	Address:表示通过sed命令要对哪些行进行处理
	Command：表示操作命令
	options：
		-n：不再显示模式空间中的内容(默认显示)
		-i: 直接修改原文件
		-e 'AddressCommand' -e 'AddressCommand'：同时执行多个匹配操作
		# sed  -e  '/^#/d' -e '/^$/d/' /etc/fstab
		-f FILE	将多个AddressCommand保存至文件中，每行一个AddressCommand；读取该文件中的操作同时执行多个操作 
		# cat /tmp/1.txt
		    /^#/d
		    /^$/d
		# sed -f /tmp/1.txt /etc/fstab
		 
		-r：表示使用扩展正则表达式   
    # sed -r 's|l(..e)|L\1|' /tmp/1.txt
    
	
Address表示方法：

1、StartLine,EndLine
   起始行号,终止行号 
	1,100
	1,$（可以省略不写，默认全文）
	
2、LineNumber
   行号，表示第几行
	3 

3、StartLine,+n 
	从第五行开始往后数2行，5、6、7三行
	5,+2 

4、 /REGEX/  正则表达式匹配行，/正则表达式/

	/root/  匹配包含root的行
	/bash$/ 以bash结尾的行

5、 /REGEX1/,/REGEX2/
	第1次被Regex1匹配的行开始，到第1次被Regex2匹配的行中间的所有行
	


	
Command：
d  删除符合条件的行
  # sed '1,2d' /etc/inittab  删除前两行
	
  删除文件中包含oot的行
  # sed '/oot/d' /etc/fstab 
	
  删除第1行及其后2行
  # sed '1,+2d' /etc/fstab 
	
  删除第1行
  # sed '1d' /etc/fstab 
  
  删除以/开头的行
  # sed '/^\//d' /etc/fstab 
  # sed '/^#/d' /etc/fstab    删除以#开头的行
  # sed '/\//d' /etc/fstab    删除包含/的行
	
p 显示符合条件的行
  显示以/开头的行 
  # sed -n '/^\//p' /etc/fstab 
  
a \string	在符合条件的行后追加新行，string为追加的内容           （append）
  在以/开头的行后面追加# hello world 
  # sed '/^\//a \# hello world' /etc/fstab 
  在最后一行追加1行 
  # sed '$a \hello' /etc/fstab
  
  在以/开头的行后面追加两行内容，分别为# hello world  # hello linux 
  # sed '/^\//a \# hello world\n# hello linux' /etc/fstab 
	
i \string	在符合条件的行前添加新行，string为追加的内容
   在文件第1行添加# hello world 
   # sed '1i \# hello world' /etc/fstab 

c \string 	替换指定行的内容
   将文件中最后一行内容替换为End Of File
   # sed '$c \End Of File' /1.txt 
   
   
=	用于显示每一行的行号
	显示/etc/passwd文件最后一行的行号
	# sed -n '$=' /etc/passwd
	49
   
r file_name		将指定文件的内容添加到符合条件的行的后面
   在文件的第2行后追加/etc/issue文件的内容 
   # sed '2r /etc/issue' /etc/fstab 
   
w file_name		将符合条件的内容另存到指定文件中
   将以UUID开头的行另存为到/1.txt中
   # sed '/^UUID/w /1.txt' /etc/fstab 
   
n	将光标移向当前行的下一行，进行处理操作
	
	[root@shell ~]# sed -n 'n;p' /tmp/1.txt    多个命令用；隔开。显示偶数行
	[root@shell ~]# sed -n 'p;n' /tmp/1.txt    显示奇数行

   
s/旧内容，可用正则表达式/新内容，只是普通文件/ 【修饰符】 
s/regex/string/[修饰符]		查找并替换			默认情况下，只替换每一行第1次出现的字符
   修饰符：
	g：替换每一行所有的字符
	i：忽略大小写

   查找文件中的UUID，并替换为小写uuid
   # sed 's/UUID/uuid/' /etc/fstab  默认全文替换
   # sed '1,$s/UUID/uuid/' /etc/fstab 
   将行首的/替换成#
   # sed 's/^\//#/' /etc/fstab 
   
   将每一行出现的所有/替换为@
   # sed 's/\//@/g' /etc/fstab 
   
   反向引用 \(\)   \1  \2     引用第几段（）中的内容
   将文件中以l..e替换为l..er，例如love替换为lover
   # sed 's/\(l..e\)/\1r/g' /etc/fstab 
   或
   # sed 's/l..e/&r/g' /etc/fstab 
   &：引用正则表达式匹配的所有字符串
   
   将文件中l..e的单词替换为L..e，例如love替换为Love
   # sed 's/l\(..e\)/L\1/' /1.txt 
 
   删除行首的空格
   # sed 's/^[[:space:]]*//' /etc/fstab 
   

 
sed示例：

1、删除/etc/grub.conf文件中行首的空白字符

[root@shell ~]# sed 's|^[[:space:]]\+||' /etc/grub.conf 
              # sed 's*^[[:space:]]\+**' /etc/grub.conf


2、替换/etc/inittab文件中"id:3:initdefault:"一行中的数字为5

[root@shell ~]# sed '$s/3/5/' /etc/inittab 
[root@shell ~]# sed -r 's|(id:)3(:initdefault:)|\15\2|' /etc/inittab 
              # sed 's|id:3:initdefault:|id:5:initdefault:' /etc/inittab


3、删除/etc/fstab文件中的空白行

[root@shell ~]# sed '/^$/d' /etc/fstab 


4、删除/etc/inittab文件中开头的#号

[root@shell ~]# sed 's|^#||' /etc/inittab 


5、删除某文件中开头的#号，但要求#号后面必须有空白字符

[root@shell ~]# sed 's|^#[[:space:]]\+||' /tmp/1.txt 
              # sed '^#[[:space:]]/s|^#||' /tmp/1.txt


6、删除某文件中以空白字符后面跟#号的行中的开头的空白字符及#

[root@shell ~]# sed 's|^[[:space:]]\+#||' /tmp/1.txt 


编写脚本, 将配置虚拟主机的过程写为脚本 









array: 数组

一段连续的内存空间
数组的下标从0开始

1、声明一个数组
# declare -a NAME

[root@shell shell]# declare -a test
[root@shell shell]# test[0]=aa
[root@shell shell]# test[1]=bb
[root@shell shell]# test[2]=cc


2、数组元素赋值方法
方法1：
array[0]=tom
array[1]=jerry
array[2]=mike
array[6]=natasha

方法2：
[root@shell shell]# test2=(10 20 30 40 60 90)
                    test3=(192.168.1.1 192.168.1.2)
                    test4=(aa bb cc)
                    test5=("hello world" "hello linux")

数组下标可以不连续，但在下标6之前的元素会被初始化为空值
如果某个元素值中有空格，需要使用双引号

3、引用数组元素的值
${array[n]}
	n: 数组下标 

# array=([0]=tom [1]=jerry [6]=mike)
# echo ${array[1]}
jerry

4、显示数组中下标为n的元素的字符长度
${#array[n]}

# array=([0]=tom [1]=jerry [6]=mike)
# echo ${#array[6]}
4

5、显示数组中值不为空的元素的个数
${#array[*]}  或者  ${#array[@]}

# array=([0]=tom [1]=jerry [6]=mike)
# echo ${#array[*]}
3


6	显示数组中所有的值 

[root@shell shell]# echo ${test[*]}
aa bb cc dd hello world

[root@shell shell]# echo ${test[@]}
aa bb cc dd hello world
[root@shell shell]# 



编写脚本，找出数组中最大值

#!/bin/bash
#

number=(234 54 65 89 23 43 9798)

max=${number[0]}

for i in `seq 1 6`; do
   if [ ${number[$i]} -gt $max ]; then
      max=${number[$i]}
   fi
done

echo "数组最大值：$max"


#!/bin/bash
#

#Genrate array

for index in `seq 0 6`; do
   number[$index]=$RANDOM
done

#SHOW array element

echo "数组值："
for j in `seq 0 6`; do
  echo -n "${number[$j]} "
done

max=${number[0]}

for i in `seq 1 6`; do
   if [ ${number[$i]} -gt $max ]; then
      max=${number[$i]}
   fi
done

echo "数组最大值：$max"





#!/bin/bash
#

#Genrate array
read -p "输入数组长度：" length

let array_index=$length-1


for index in `seq 0 $array_index`; do
   number[$index]=$RANDOM
done

#SHOW array element

echo "数组值："
for j in `seq 0 $array_index`; do
  echo -n "${number[$j]} "
done

#FIND max value

max=${number[0]}

for i in `seq 1 $array_index`; do
   if [ ${number[$i]} -gt $max ]; then
	  max=${number[$i]}
   fi
done

echo "数组最大值：$max"

















