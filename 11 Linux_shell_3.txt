循环结构 

	1）	循环操作是什么？ 
	2） 循环开始的条件
	3）	循环终止的条件

	for, while, util


for循环结构 

for 变量名称 in 变量取值; do
	statement
	statement
done


for 变量名称 in 变量取值 
do
	statement
	statement
done


变量取值 

	数字
		10 20 30
		花括号展开	{1..100}
		[root@shell shell]# seq 10
		[root@shell shell]# seq 2 10
		[root@shell shell]# seq 1 2 10



编写脚本， 计算1---100的和

#!/bin/bash
#

sum=0

for i in `seq 100`; do
	let sum=$sum+$i
done

echo $sum


编写脚本， 计算1---100所有奇数的和

#!/bin/bash
#

sum=0

for i in `seq 100`; do
   let ys=$i%2
   if [ $ys -ne 0 ]; then
	 let sum=$sum+$i
   fi
done

echo $sum


编写脚本，批量创建用户user1---user20 


#!/bin/bash
#

for i in `seq 20`; do
	if ! id user$i &> /dev/null; then
		useradd user$i
		echo "user$i" | passwd --stdin user$i &> /dev/null
		echo "user$i create finished."
    else
		echo "user$i exist."
	fi
done


编写脚本， 检测172.16.80.0/24在线的主机 

#!/bin/bash
#

network=172.16.80.

for ip in `seq 254`; do
   if ping -c 1 -w 1 $network$ip &> /dev/null; then
	echo "Host $network$ip is up."
   else
	echo "Host $network$ip is down."
   fi
done


编写脚本，搜集172.16.80.0/24网段所有在线主机的IP地址及MAC地址 

[root@localhost ~]# arping -c 1 -w 1 172.16.80.170





编写脚本，检测172.16.0.0/16的在线主机    


	172.16.1.1－－－－－－－－－172.16.1.255
	172.16.2.1－－－－－－－－－172.16.2.255
	172.16.3.1－－－－－－－－－172.16.3.255
	....
	172.16.254.1----------------172.16.254.254



for i in `seq 10`; do
   for j in `seq 10`; do
	done
done



编写脚本，输出9＊9乘法表 



编写脚本：

	ab 			a+b
	abc			a+b+c
	sjdfl		s+j+d+f+l


#!/bin/bash
#

read -p "Enter string: " str

length=${#str}
let len=$length-1
echo -n ${str:0:1}

for i in `seq 1 $len`; do
  echo -n +${str:$i:1}
done
echo


字符取值 

	str1 str2 str2

编写脚本，批量创建用户zhsan, lisi, yg ,jl 

#!/bin/bash
#

for name in zhsan lisi yg jl; do
   if ! id $name &> /dev/null; then
	   useradd $name
	   echo "$name create finished."
   fi
done


文件

	cat FILE

注意：

	以空白字符区分文件的每一行 



编写脚本，向系统中所有用户打招呼 

Hello, userA

#!/bin/bash
#

for name in `awk -F: '{print $1}' /etc/passwd`; do
   echo "Hello, $name"
done


编写脚本，分别统计/bin/bash和/sbin/nologin用户的数量 

# /bin/bash

number_bash=0
number_nologin=0

line=`wc -l /etc/passwd | awk '{print $1}'`

for i in `seq $line`; do
    shell_name=`head -n $i /etc/passwd | tail -1 | awk -F: '{print $7}'`
     if [ $shell_name == /bin/bash ]; then
     	  let number_bash=$number_bash+1
     elif [ $shell_name == /sbin/nologin ]; then
         let number_nologin=$number_nologin+1
      fi
done

echo "SHELL为/bin/bash的用户数量：$number_bash"
echo "SHELL为/sbin/nologin的用户数量：$number_nologin"




中断循环语句：

	break				中断整个循环
	continue			中断本次循环


break中断的例子：

#!/bin/bash


sum=0

for i in `seq 100`; do
   let sum=$sum+$i
   if [ $sum -ge 3000 ]; then
	echo $i
	break
   fi
done


continue中断的例子：


#!/bin/bash


sum=0

for i in `seq 100`; do
   let ys=$i%2
   if [ $ys -eq 0 ]; then
	continue
   fi
   let sum=$sum+$i
done

echo $sum


for循环： 明确知道循环的次数



while循环

用法1：

while CONDITION; do
	statement
	statement
	....
	change_condition_statement
done


编写脚本，计算1－－100的和 

#!/bin/bash

sum=0
i=1

while [ $i -le 100 ]; do
   let sum=$sum+$i
   let i=$i+1
done

echo $sum

#!/bin/bash

sum=0
i=1

while [ $i -le 100 ]; do
   let sum=$sum+$i
   let i++
done

echo $sum


编写脚本 

#!/bin/bash
#

read -p "请输入你的选择: " choice

while [ $choice != q ]; do
   read -p "请输入你的选择: " choice
done



用法2：

while true; do
	statement
	statement
	....
done

编写脚本，实现每3秒钟显示CPU负载

#!/bin/bash


while true; do
   uptime
   sleep 3
done


编写脚本

#!/bin/bash

while true; do
   read -p "请输入你的选择：" choice
   if [ $choice == q ]; then
        break
   fi
done



用法3：	用于遍历文件

while read line; do
	statement
	statement
	.....
done < /path/to/file


#!/bin/bash
#

number_bash=0
number_nologin=0

while read line; do
   sh_name=`echo $line | awk -F: '{print $7}'`
   case $sh_name in
     /bin/bash)
	let number_bash=$number_bash+1
        ;;
     /sbin/nologin)
	let number_nologin=$number_nologin+1
        ;;
   esac
done < /etc/passwd

echo $number_bash
echo $number_nologin




for, while , util 

util循环：

util CONDITION; do
	statement
	statement
	....
done

条件为假循环开始，条件为真循环结束 







函数(function)的使用

1	定义函数 

方法1：

函数名称() {

	
}

方法2：

function 函数名称{



}


2	调用函数 

	函数名称


定义函数时，还可以使用位置变量给函数传递参数




编写脚本，提供给用户功能菜单，包括创建目录及删除目录，根据用户的需求分别实现创建、删除目录功能，创建、删除目录的功能使用函数实现

==========目录基本管理===============
1	创建目录
2	删除目录
q	退出	


#!/bin/bash

createdir() {
   read -p "请输入目录名称：" dir
   if [ -d $dir ]; then
	echo "目录$dir已经存在"
   else
        mkdir -p $dir
        echo "目录$dir创建完成."
   fi

}

removedir() {

   read -p "输入目录名称：" dir
   if [ -d $dir ]; then
      rm -rf $dir
      echo "目录$dir已经删除"
   else
      echo "目录$dir不存在"
   fi

}


showmenu() {
cat << eof
==========目录基本管理============
1	创建目录
2	删除目录
q	退出	
eof
}


while true; do
    showmenu
    echo
    read -p "请输入你的选择：" choice

  case $choice in
	  1)
		createdir
		;;
      2)
	   removedir
	    ;;
     q)
     	exit 0
	    ;;
  esac
done

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

#!/bin/bash

createdir() {
   if [ -d $1 ]; then
	echo "目录$1已经存在"
   else
        mkdir -p $1
        echo "目录$1创建完成."
   fi

}

removedir() {

   read -p "输入目录名称：" dir
   if [ -d $dir ]; then
      rm -rf $dir
      echo "目录$dir已经删除"
   else
      echo "目录$dir不存在"
   fi

}


showmenu() {
cat << eof
==========目录基本管理============
1	创建目录
2	删除目录
q	退出	
eof
}




while true; do
    showmenu
    echo
    read -p "请输入你的选择：" choice

    case $choice in
      1)
        read -p "请输入目录名称：" dir
	createdir $dir
	;;
      2)
	removedir
	;;
      q)
	exit 0
	;;
    esac
done
























